// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "piqp_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// piqp_setup_dense
SEXP piqp_setup_dense(Eigen::Map<Mat> P, Eigen::Map<Vec> c, Eigen::Map<Mat> A, Eigen::Map<Vec> b, Eigen::Map<Mat> G, Eigen::Map<Vec> h, Rcpp::Nullable<Eigen::Map<Vec>> x_lb, Rcpp::Nullable<Eigen::Map<Vec>> x_ub, const List& settings);
RcppExport SEXP _piqp_piqp_setup_dense(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Mat> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Mat> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Mat> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< const List& >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_setup_dense(P, c, A, b, G, h, x_lb, x_ub, settings));
    return rcpp_result_gen;
END_RCPP
}
// piqp_setup_sparse
SEXP piqp_setup_sparse(Eigen::Map<SparseMat> P, Eigen::Map<Vec> c, Eigen::Map<SparseMat> A, Eigen::Map<Vec> b, Eigen::Map<SparseMat> G, Eigen::Map<Vec> h, Nullable<Eigen::Map<Vec>> x_lb, Nullable<Eigen::Map<Vec>> x_ub, const List& settings);
RcppExport SEXP _piqp_piqp_setup_sparse(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<SparseMat> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<SparseMat> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<SparseMat> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Vec> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< const List& >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_setup_sparse(P, c, A, b, G, h, x_lb, x_ub, settings));
    return rcpp_result_gen;
END_RCPP
}
// piqp_solve_dense
List piqp_solve_dense(SEXP solver_p);
RcppExport SEXP _piqp_piqp_solve_dense(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_solve_dense(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_solve_sparse
List piqp_solve_sparse(SEXP solver_p);
RcppExport SEXP _piqp_piqp_solve_sparse(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_solve_sparse(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_get_dims_dense
IntegerVector piqp_get_dims_dense(SEXP solver_p);
RcppExport SEXP _piqp_piqp_get_dims_dense(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_get_dims_dense(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_get_dims_sparse
IntegerVector piqp_get_dims_sparse(SEXP solver_p);
RcppExport SEXP _piqp_piqp_get_dims_sparse(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_get_dims_sparse(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_update_dense
void piqp_update_dense(SEXP solver_p, Rcpp::Nullable<Eigen::Map<Mat>> P, Rcpp::Nullable<Eigen::Map<Vec>> c, Rcpp::Nullable<Eigen::Map<Mat>> A, Rcpp::Nullable<Eigen::Map<Vec>> b, Rcpp::Nullable<Eigen::Map<Mat>> G, Rcpp::Nullable<Eigen::Map<Vec>> h, Rcpp::Nullable<Eigen::Map<Vec>> x_lb, Rcpp::Nullable<Eigen::Map<Vec>> x_ub);
RcppExport SEXP _piqp_piqp_update_dense(SEXP solver_pSEXP, SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    piqp_update_dense(solver_p, P, c, A, b, G, h, x_lb, x_ub);
    return R_NilValue;
END_RCPP
}
// piqp_update_sparse
void piqp_update_sparse(SEXP solver_p, Rcpp::Nullable<Eigen::Map<SparseMat>> P, Rcpp::Nullable<Eigen::Map<Vec>> c, Rcpp::Nullable<Eigen::Map<SparseMat>> A, Rcpp::Nullable<Eigen::Map<Vec>> b, Rcpp::Nullable<Eigen::Map<SparseMat>> G, Rcpp::Nullable<Eigen::Map<Vec>> h, Nullable<Eigen::Map<Vec>> x_lb, Nullable<Eigen::Map<Vec>> x_ub);
RcppExport SEXP _piqp_piqp_update_sparse(SEXP solver_pSEXP, SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    piqp_update_sparse(solver_p, P, c, A, b, G, h, x_lb, x_ub);
    return R_NilValue;
END_RCPP
}
// piqp_get_settings_dense
List piqp_get_settings_dense(SEXP solver_p);
RcppExport SEXP _piqp_piqp_get_settings_dense(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_get_settings_dense(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_get_settings_sparse
List piqp_get_settings_sparse(SEXP solver_p);
RcppExport SEXP _piqp_piqp_get_settings_sparse(SEXP solver_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_get_settings_sparse(solver_p));
    return rcpp_result_gen;
END_RCPP
}
// piqp_update_settings_dense
void piqp_update_settings_dense(SEXP solver_p, const List& settings);
RcppExport SEXP _piqp_piqp_update_settings_dense(SEXP solver_pSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< const List& >::type settings(settingsSEXP);
    piqp_update_settings_dense(solver_p, settings);
    return R_NilValue;
END_RCPP
}
// piqp_update_settings_sparse
void piqp_update_settings_sparse(SEXP solver_p, const List& settings);
RcppExport SEXP _piqp_piqp_update_settings_sparse(SEXP solver_pSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< const List& >::type settings(settingsSEXP);
    piqp_update_settings_sparse(solver_p, settings);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_piqp_piqp_setup_dense", (DL_FUNC) &_piqp_piqp_setup_dense, 9},
    {"_piqp_piqp_setup_sparse", (DL_FUNC) &_piqp_piqp_setup_sparse, 9},
    {"_piqp_piqp_solve_dense", (DL_FUNC) &_piqp_piqp_solve_dense, 1},
    {"_piqp_piqp_solve_sparse", (DL_FUNC) &_piqp_piqp_solve_sparse, 1},
    {"_piqp_piqp_get_dims_dense", (DL_FUNC) &_piqp_piqp_get_dims_dense, 1},
    {"_piqp_piqp_get_dims_sparse", (DL_FUNC) &_piqp_piqp_get_dims_sparse, 1},
    {"_piqp_piqp_update_dense", (DL_FUNC) &_piqp_piqp_update_dense, 9},
    {"_piqp_piqp_update_sparse", (DL_FUNC) &_piqp_piqp_update_sparse, 9},
    {"_piqp_piqp_get_settings_dense", (DL_FUNC) &_piqp_piqp_get_settings_dense, 1},
    {"_piqp_piqp_get_settings_sparse", (DL_FUNC) &_piqp_piqp_get_settings_sparse, 1},
    {"_piqp_piqp_update_settings_dense", (DL_FUNC) &_piqp_piqp_update_settings_dense, 2},
    {"_piqp_piqp_update_settings_sparse", (DL_FUNC) &_piqp_piqp_update_settings_sparse, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_piqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
